(()=>{"use strict";var t={99:(t,e,n)=>{n.d(e,{Z:()=>v});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),c=n(667),u=n.n(c),l=new URL(n(913),n.b),f=new URL(n(792),n.b),s=new URL(n(329),n.b),d=new URL(n(533),n.b),p=a()(o()),y=u()(l),b=u()(f),h=u()(s),m=u()(d);p.push([t.id,"@font-face{font-family:'Allen';font-style:normal;font-weight:normal;src:url("+y+")}@font-face{font-family:'OPTIMA';font-style:normal;font-weight:normal;src:url("+b+")}@font-face{font-family:'Helvetica Neue';font-style:normal;font-weight:normal;src:url("+h+")}@font-face{font-family:'ReenieBeanie';font-style:normal;font-weight:normal;src:url("+m+")}*{box-sizing:border-box;margin:0;padding:0}body{background-color:#9eafeb;min-width:600px}.blocker{position:absolute;background-color:rgba(0,0,0,0.438);height:100vh;width:100vw;z-index:2}#header .web-title{font-size:1rem;font-family:'Helvetica Neue', sans-serif;background-color:navy;font-weight:bold;color:whitesmoke;text-align:center}#header .sub-header{display:flex;justify-content:space-between;align-items:center;margin-left:10px;margin-right:10px}#header .sub-header .project-title{font-size:4rem;font-family:'OPTIMA', sans-serif;color:navy}#header .sub-header #project-selector{background-color:#0563af;color:white;padding:12px;min-width:200px;border:none;font-size:20px;box-shadow:0 5px 25px rgba(0,0,0,0.2);-webkit-appearance:button;appearance:button;outline:none}#header .sub-header #project-selector::before{content:\"\\f13a\";position:absolute;top:0;right:0;width:20%;height:100%;text-align:center;font-size:28px;line-height:45px;color:rgba(255,255,255,0.5);background-color:rgba(255,255,255,0.1);pointer-events:none}#header .sub-header #project-selector:hover::before{color:rgba(255,255,255,0.6);background-color:rgba(255,255,255,0.2)}#header .sub-header #project-selector select option{padding:30px}#board-content{text-align:center;margin:8px;margin-top:15px;padding:8px}#board-content #dashboard-div{padding:15px;font-size:32px;font-family:Helvetica;font-weight:bold;color:white}#board-content #dashboard-div .prj-card{display:flex;flex-direction:column;justify-content:space-evenly;align-items:center;font-family:'ReenieBeanie', sans-serif;text-align:center;line-height:1;border:1px solid #E8E8E8;border-top:10px solid #fdfd86;border-bottom-right-radius:60px 5px;box-shadow:10px 10px 5px rgba(0,0,0,0.4);background:linear-gradient(135deg, #ff8 81%, #ff8 82%, #ff8 82%, #ffffc6 100%);color:black;padding:10px}#board-content #dashboard-div .prj-card-title{text-align:center;font-size:46px;color:black}#board-content #dashboard-div .prj-card-desc{padding:6px;font-size:20px;color:black}#board-content #dashboard-div .prj-card p{padding:5px}#board-content #dashboard-div .prj-card-separator{width:80%;border:2px double #c59d5f;margin-top:10px;margin-bottom:10px}#board-content #dashboard-div .prj-todos-list-holder{text-align:initial;width:100%}#board-content #dashboard-div .prj-todos-list{margin-left:10%;font-size:15px}#board-content #dashboard-div .prj-button-holder{display:flex;width:100px;justify-content:space-between;margin-top:20px}#board-content #dashboard-div .prj-button-holder img{height:40px}#board-content #dashboard-div .prj-button-holder button{background-color:#fdfd86;border:none;border-radius:10px;cursor:pointer}#board-content .todo-card{display:flex;flex-direction:column;justify-content:flex-start;align-items:left;margin-top:15px;margin-bottom:15px;border-radius:2rem;background-color:#6a76c8;font-family:'Allen', sans-serif}#board-content .todo-card .main-todo{display:flex;justify-content:flex-start;align-items:center}#board-content .todo-card .click-todo{height:50px;display:flex;justify-content:flex-start;align-items:center;cursor:pointer}#board-content .todo-card .toggle-todo .card-description{font-size:1rem;margin-left:15px;margin-right:15px;margin-bottom:15px;text-align:left}#board-content .todo-card .card-title{font-size:1.5rem;margin-left:15px;margin-right:15px;min-width:500px;text-align:left}#board-content .todo-card .card-due-date{font-size:1.5rem;margin-left:15px;margin-right:15px}#board-content .todo-card div[class^='priority']{font-size:1.5rem;min-width:100px;text-align:left}#board-content .todo-card img{height:40px}#board-content .todo-card button{background-color:#6a76c8;border:none;border-radius:10px;margin-right:5px;cursor:pointer}#project-div-form{position:fixed;z-index:2;left:50%;top:50%;transform:translate(-50%, -50%);background:black;border:3px solid #f1f1f1;padding:10px;background-color:white;border-radius:5px}#project-div-form #prj-title{display:inline-block}#project-div-form #prj-desc{display:block;margin:auto;width:300px;height:100px}#project-div-form #project-form{display:flex;flex-direction:column}#project-div-form #btn-prj-form-confirm,#project-div-form #btn-prj-form-edit,#project-div-form #btn-prj-form-cancel{background-color:#04AA6D;color:white;padding:16px 20px;border:none;cursor:pointer;width:50%;margin-top:10px;opacity:0.7}#project-div-form #btn-form-confirm:hover,#project-div-form #btn-form-edit:hover,#project-div-form #btn-form-cancel:hover{opacity:1}#project-div-form input{border:2px solid #000;margin-bottom:15px;padding:5px;border-radius:5px}#project-div-form input:invalid{border-color:red}#project-div-form input:valid{border-color:green}#project-div-form select:invalid{border-color:red}#project-div-form select:valid{border-color:green}#div-form{position:fixed;z-index:2;left:50%;top:50%;transform:translate(-50%, -50%);background:black;border:3px solid #f1f1f1;padding:10px;background-color:white;border-radius:5px}#div-form #input-title{display:inline-block}#div-form #input-date{display:inline-block}#div-form #input-priority{display:inline-block;border-radius:5px;border:2px solid;margin-bottom:15px;padding:5px}#div-form #input-desc{display:block;margin:auto;width:300px;height:100px}#div-form #btn-form-confirm,#div-form #btn-form-edit,#div-form #btn-form-cancel{background-color:#04AA6D;color:white;padding:16px 20px;border:none;cursor:pointer;width:50%;margin-top:10px;opacity:0.7}#div-form #btn-form-confirm:hover,#div-form #btn-form-edit:hover,#div-form #btn-form-cancel:hover{opacity:1}#div-form input{border:2px solid #000;margin-bottom:15px;padding:5px;border-radius:5px}#div-form input:invalid{border-color:red}#div-form input:valid{border-color:green}#div-form select:invalid{border-color:red}#div-form select:valid{border-color:green}#btn-new-prj,#btn-new-todo{width:250px}.switch{position:relative;z-index:1;display:inline-block;width:60px;height:34px}.switch input{opacity:0;width:0;height:0}.slider{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;-webkit-transition:.4s;transition:.4s}.slider:before{position:absolute;content:\"\";height:26px;width:26px;left:4px;bottom:4px;background-color:white;-webkit-transition:.4s;transition:.4s}input:checked+.slider{background-color:#2196F3}input:focus+.slider{box-shadow:0 0 1px #2196F3}input:checked+.slider:before{-webkit-transform:translateX(26px);-ms-transform:translateX(26px);transform:translateX(26px)}.slider.round{border-radius:34px}.slider.round:before{border-radius:50%}.form-button-container{display:flex;gap:10px}.grid-div{display:grid;grid-template-columns:repeat(auto-fit, minmax(350px, 1fr));gap:15px}.invisible{display:none}.striked{text-decoration:line-through}.pushable{position:relative;border:none;background:transparent;padding:0;cursor:pointer;outline-offset:4px;transition:filter 250ms;width:100%;height:50px}.shadow{position:absolute;top:0;left:0;width:100%;height:100%;border-radius:12px;background:rgba(0,0,0,0.25);will-change:transform;transform:translateY(2px);transition:transform 600ms cubic-bezier(0.3, 0.7, 0.4, 1)}.edge{position:absolute;top:0;left:0;width:100%;height:100%;border-radius:12px}.front{display:block;position:relative;padding:12px 22px;border-radius:12px;font-size:1.25rem;color:white;will-change:transform;transform:translateY(-4px);transition:transform 600ms cubic-bezier(0.3, 0.7, 0.4, 1)}.blue{background:navy}.blue-grad{background:linear-gradient(to left, #000052 0%, #0000a3 8%, #0000a3 92%, #000052 100%)}.pushable:hover{filter:brightness(110%)}.pushable:hover .front{transform:translateY(-6px);transition:transform 250ms cubic-bezier(0.3, 0.7, 0.4, 1.5)}.pushable:active .front{transform:translateY(-2px);transition:transform 34ms}.pushable:hover .shadow{transform:translateY(4px);transition:transform 250ms cubic-bezier(0.3, 0.7, 0.4, 1.5)}.pushable:active .shadow{transform:translateY(1px);transition:transform 34ms}.pushable:focus:not(:focus-visible){outline:none}\n","",{version:3,sources:["webpack://./src/styles.scss"],names:[],mappings:"AA2BA,WACE,mBAAoB,CACpB,iBAAkB,CAClB,kBAAmB,CACnB,2CACkC,CAGpC,WACE,oBAAqB,CACrB,iBAAkB,CAClB,kBAAmB,CACnB,2CAC2B,CAG7B,WACE,4BAA6B,CAC7B,iBAAkB,CAClB,kBAAmB,CACnB,2CACsD,CAGxD,WACE,0BAA2B,CAC3B,iBAAkB,CAClB,kBAAmB,CACnB,2CACyC,CAM3C,EACI,qBAAqB,CACrB,QAAS,CACT,SAAU,CACb,KAGC,wBAAwB,CACxB,eAAgB,CACjB,SAGC,iBAAiB,CACjB,kCAAwC,CACxC,YAAY,CACZ,WAAW,CACX,SAAS,CACV,mBAYK,cAAe,CACf,wCAAyC,CACzC,qBAAsB,CACtB,gBAAgB,CAChB,gBAAgB,CAChB,iBAAkB,CAdxB,oBAmBM,YAAY,CACZ,6BAA8B,CAC9B,kBAAmB,CACnB,gBAAgB,CAChB,iBAAiB,CAvBvB,mCA2BQ,cAAc,CACd,gCAAiC,CACjC,UAAU,CA7BlB,sCAmCM,wBAAyB,CACzB,WAAY,CACZ,YAAa,CACb,eAAgB,CAChB,WAAY,CACZ,cAAe,CACf,qCAAyC,CACzC,yBAA0B,CAC1B,iBAAkB,CAClB,YAAa,CA5CnB,8CAgDM,eAAgB,CAEhB,iBAAkB,CAClB,KAAM,CACN,OAAQ,CACR,SAAU,CACV,WAAY,CACZ,iBAAkB,CAClB,cAAe,CACf,gBAAiB,CACjB,2BAA+B,CAC/B,sCAA0C,CAC1C,mBAAoB,CA5D1B,oDAgEM,2BAA+B,CAC/B,sCAA0C,CAjEhD,oDAqEM,YAAa,CACd,eAKD,iBAAkB,CAClB,UAAU,CACV,eAAe,CACf,WAAW,CAJf,8BAcI,YAAa,CACb,cAAe,CACf,qBAAsB,CACtB,gBAAiB,CACjB,WAAY,CAlBhB,wCAsBM,YAAY,CACZ,qBAAqB,CACrB,4BAA6B,CAC7B,kBAAmB,CAEnB,sCAAsC,CAEtC,iBAAiB,CAEjB,aAAc,CACd,wBAAwB,CACxB,6BAA6B,CAC7B,mCAAoC,CACpC,wCAA4C,CAE5C,8EAAqF,CACrF,WAAY,CACZ,YAAY,CAvClB,8CA4CM,iBAAkB,CAClB,cAAc,CACd,WAAW,CA9CjB,6CAmDM,WAAW,CACX,cAAc,CACd,WAAY,CArDlB,0CA0DM,WAAW,CA1DjB,kDA6DM,SAAU,CACV,yBAA0B,CAC1B,eAAgB,CAChB,kBAAkB,CAhExB,qDAmEM,kBAAkB,CAClB,UAAU,CApEhB,8CAyEM,eAAe,CACf,cAAc,CA1EpB,iDA8EM,YAAY,CACZ,WAAW,CACX,6BAA6B,CAC7B,eAAe,CAjFrB,qDAoFQ,WAAW,CApFnB,wDAwFQ,wBAAyB,CACzB,WAAW,CACX,kBAAmB,CACnB,cAAc,CA3FtB,0BAsGQ,YAAY,CACZ,qBAAqB,CACrB,0BAA0B,CAC1B,gBAAiB,CAEjB,eAAe,CACf,kBAAkB,CAGlB,kBAAmB,CACnB,wBAAwB,CAExB,+BAAgC,CAlHxC,qCAqHY,YAAY,CACZ,0BAA2B,CAC3B,kBAAkB,CAvH9B,sCA0HY,WAAY,CACZ,YAAY,CACZ,0BAA2B,CAC3B,kBAAkB,CAClB,cAAc,CA9H1B,yDAqIgB,cAAe,CACf,gBAAiB,CACjB,iBAAkB,CAClB,kBAAkB,CAClB,eAAe,CAzI/B,sCA8IY,gBAAiB,CACjB,gBAAiB,CACjB,iBAAkB,CAClB,eAAe,CACf,eAAe,CAlJ3B,yCAsJY,gBAAgB,CAChB,gBAAgB,CAChB,iBAAiB,CAxJ7B,iDA4JY,gBAAgB,CAChB,eAAe,CACf,eAAe,CA9J3B,8BAmKU,WAAW,CAnKrB,iCAuKU,wBAAwB,CACxB,WAAW,CACX,kBAAmB,CACnB,gBAAgB,CAChB,cAAc,CACf,kBAOP,cAAc,CACd,SAAS,CACT,QAAQ,CACR,OAAO,CACP,+BAAgC,CAChC,gBAAgB,CAChB,wBAAyB,CACzB,YAAa,CACb,sBAAuB,CACvB,iBAAkB,CAVpB,6BAaI,oBAAoB,CAbxB,4BAiBI,aAAa,CACb,WAAW,CACX,WAAY,CACZ,YAAa,CApBjB,gCAwBE,YAAY,CACZ,qBAAsB,CAzBxB,oHAqCI,wBAAyB,CACzB,WAAY,CACZ,iBAAkB,CAClB,WAAY,CACZ,cAAe,CACf,SAAU,CACV,eAAe,CACf,WAAY,CA5ChB,0HAkDI,SAAU,CAlDd,wBAsDI,qBAAsB,CACtB,kBAAmB,CACnB,WAAY,CACZ,iBAAkB,CAzDtB,gCA6DI,gBAAiB,CA7DrB,8BAiEI,kBAAmB,CAjEvB,iCAqEI,gBAAiB,CArErB,+BAyEI,kBAAmB,CACpB,UAMD,cAAc,CACd,SAAS,CACT,QAAQ,CACR,OAAO,CACP,+BAAgC,CAChC,gBAAgB,CAChB,wBAAyB,CACzB,YAAa,CACb,sBAAuB,CACvB,iBAAkB,CAXpB,uBAcI,oBAAoB,CAdxB,sBAkBI,oBAAoB,CAlBxB,0BAqBI,oBAAoB,CACpB,iBAAkB,CAClB,gBAAiB,CACjB,kBAAmB,CACnB,WAAY,CAzBhB,sBA4BI,aAAa,CACb,WAAW,CACX,WAAY,CACZ,YAAa,CA/BjB,gFAwCI,wBAAyB,CACzB,WAAY,CACZ,iBAAkB,CAClB,WAAY,CACZ,cAAe,CACf,SAAU,CACV,eAAe,CACf,WAAY,CA/ChB,kGAqDI,SAAU,CArDd,gBAyDI,qBAAsB,CACtB,kBAAmB,CACnB,WAAY,CACZ,iBAAkB,CA5DtB,wBAgEI,gBAAiB,CAhErB,sBAoEI,kBAAmB,CApEvB,yBAwEI,gBAAiB,CAxErB,uBA4EI,kBAAmB,CACpB,2BAMD,WAAW,CACZ,QAMG,iBAAkB,CAClB,SAAS,CACT,oBAAqB,CACrB,UAAW,CACX,WAAY,CACb,cAIC,SAAU,CACV,OAAQ,CACR,QAAS,CACV,QAIC,iBAAkB,CAClB,cAAe,CACf,KAAM,CACN,MAAO,CACP,OAAQ,CACR,QAAS,CACT,qBAAsB,CACtB,sBAAuB,CACvB,cAAe,CAChB,eAGC,iBAAkB,CAClB,UAAW,CACX,WAAY,CACZ,UAAW,CACX,QAAS,CACT,UAAW,CACX,sBAAuB,CACvB,sBAAuB,CACvB,cAAe,CAChB,sBAGC,wBAAyB,CAC1B,oBAGC,0BAA2B,CAC5B,6BAGC,kCAAmC,CACnC,8BAA+B,CAC/B,0BAA2B,CAC5B,cAIC,kBAAmB,CACpB,qBAGC,iBAAkB,CACnB,uBAGD,YAAY,CACZ,QAAQ,CACT,UAIC,YAAY,CACZ,0DAA2D,CAC3D,QAAQ,CAET,WAIC,YAAY,CACb,SAKC,4BAA6B,CAC9B,UAUC,iBAAkB,CAClB,WAAY,CACZ,sBAAuB,CACvB,SAAU,CACV,cAAe,CACf,kBAAmB,CACnB,uBAAwB,CACxB,UAAU,CACV,WAAW,CACZ,QAEC,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAAY,CACZ,kBAAmB,CACnB,2BAA+B,CAC/B,qBAAsB,CACtB,yBAA0B,CAC1B,yDAG6B,CAC9B,MAGC,iBAAkB,CAClB,KAAM,CACN,MAAO,CACP,UAAW,CACX,WAAY,CACZ,kBAAmB,CAEpB,OAGC,aAAc,CACd,iBAAkB,CAClB,iBAAkB,CAClB,kBAAmB,CACnB,iBAAkB,CAClB,WAAY,CACZ,qBAAsB,CACtB,0BAA2B,CAC3B,yDAG6B,CAC9B,MAKC,eAAe,CAChB,WAGC,sFAMC,CACF,gBAKC,uBAAwB,CACzB,uBAEC,0BAA2B,CAC3B,2DAG+B,CAChC,wBAEC,0BAA2B,CAC3B,yBAA0B,CAC3B,wBAEC,yBAA0B,CAC1B,2DAG+B,CAChC,yBAEC,yBAA0B,CAC1B,yBAA0B,CAC3B,oCAEC,YAAa",sourcesContent:["/* variables */\n$color1:#15a585 ;\n$color2: #61bf85 ;\n$color3: #9ad786 ;\n$color4: #d4ed8c;\n\n\n\n$blue: #c7e1f7;\n$bground:#15a585;\n$purple: rgba(170, 50, 220, .6);\n$grey: rgba(138, 126, 143, 0.6);\n$text-shadow8:   0.07em 0 black,\n                0 0.07em black,\n                -0.07em 0 black,\n                0 -0.07em black,\n                -0.07em -0.07em black,\n                -0.07em 0.07em black,\n                0.07em -0.07em black,\n                0.07em 0.07em black;\n$text-shadow4:   0.07em 0 black,\n                0 0.07em black,\n                -0.07em 0 black,\n                0 -0.07em black;\n$text-shadow1:   2px 0 #ffc300;\n\n/* Font families */\n@font-face {\n  font-family: 'Allen';\n  font-style: normal;\n  font-weight: normal;\n  src:\n    url('./fonts/Allan-Regular.ttf');\n}\n\n@font-face {\n  font-family: 'OPTIMA';\n  font-style: normal;\n  font-weight: normal;\n  src:\n    url('./fonts/OPTIMA.TTF');\n}\n\n@font-face {\n  font-family: 'Helvetica Neue';\n  font-style: normal;\n  font-weight: normal;\n  src:\n    url('./fonts/Helvetica\\ Neue\\ Medium\\ Extended.ttf');\n}\n\n@font-face {\n  font-family: 'ReenieBeanie';\n  font-style: normal;\n  font-weight: normal;\n  src:\n    url('./fonts/ReenieBeanie-Regular.ttf');\n}\n\n\n/* código css */\n\n* {\n    box-sizing:border-box;\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n  background-color:#9eafeb;\n  min-width: 600px;\n}\n\n.blocker {\n  position:absolute;\n  background-color: hsla(0, 0%, 0%, 0.438);\n  height:100vh;\n  width:100vw;\n  z-index:2;\n}\n\n\n#header {\n  \n    //margin:8px;\n    //padding:8px;\n    //outline: 8px ridge $purple;\n    //border-radius: 2rem;\n    //background-color:$grey;\n    //min-width:600px;\n    .web-title {\n      font-size: 1rem;\n      font-family: 'Helvetica Neue', sans-serif;\n      background-color: navy;\n      font-weight:bold;\n      color:whitesmoke;\n      text-align: center;\n      //margin-left:100px;\n  }\n  \n  .sub-header {\n      display:flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-left:10px;\n      margin-right:10px;\n\n      .project-title {\n\n        font-size:4rem;\n        font-family: 'OPTIMA', sans-serif;\n        color:navy;\n    }\n\n    /* The selector styles */\n    \n    #project-selector {\n      background-color: #0563af;\n      color: white;\n      padding: 12px;\n      min-width: 200px;\n      border: none;\n      font-size: 20px;\n      box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);\n      -webkit-appearance: button;\n      appearance: button;\n      outline: none;\n    }\n    \n    #project-selector::before {\n      content: \"\\f13a\";\n      //font-family: FontAwesome;\n      position: absolute;\n      top: 0;\n      right: 0;\n      width: 20%;\n      height: 100%;\n      text-align: center;\n      font-size: 28px;\n      line-height: 45px;\n      color: rgba(255, 255, 255, 0.5);\n      background-color: rgba(255, 255, 255, 0.1);\n      pointer-events: none;\n    }\n    \n    #project-selector:hover::before {\n      color: rgba(255, 255, 255, 0.6);\n      background-color: rgba(255, 255, 255, 0.2);\n    }\n    \n    #project-selector select option {\n      padding: 30px;\n    }\n  }\n}\n\n#board-content {\n    text-align: center;\n    margin:8px;\n    margin-top:15px;\n    padding:8px;\n    //outline: 8px ridge $purple;\n    //border-radius: 2rem;\n    //background-color:$grey;\n\n    //min-height:1000px;\n  \n\n\n  #dashboard-div {\n    padding: 15px;\n    font-size: 32px;\n    font-family: Helvetica;\n    font-weight: bold;\n    color: white;\n\n\n    .prj-card {\n      display:flex;\n      flex-direction:column;\n      justify-content: space-evenly;\n      align-items: center;\n\n      font-family:'ReenieBeanie', sans-serif; // import font\n      \n      text-align:center;\n      \n      line-height: 1;  \n      border:1px solid #E8E8E8;  \n      border-top:10px solid #fdfd86;  \n      border-bottom-right-radius: 60px 5px;\n      box-shadow:10px 10px 5px rgba(0, 0, 0, 0.40);\n\n      background: linear-gradient(135deg, #ffff88 81%,#ffff88 82%,#ffff88 82%,#ffffc6 100%);\n      color: black;\n      padding:10px;\n  \n    }\n    \n    .prj-card-title {\n      text-align: center;\n      font-size:46px;\n      color:black;\n      //text-shadow: $text-shadow1;\n    }\n  \n    .prj-card-desc {\n      padding:6px;\n      font-size:20px;\n      color: black;\n      \n    //  text-shadow: $text-shadow1;\n    }\n    .prj-card p {\n      padding:5px;\n    }\n    .prj-card-separator {\n      width: 80%;\n      border: 2px double #c59d5f;\n      margin-top: 10px;\n      margin-bottom:10px;\n    }\n    .prj-todos-list-holder {\n      text-align:initial;\n      width:100%;\n    }\n\n    .prj-todos-list {\n      //margin-top:20px;\n      margin-left:10%;\n      font-size:15px;\n      }\n\n    .prj-button-holder {\n      display:flex;\n      width:100px;\n      justify-content:space-between;\n      margin-top:20px;\n    \n      img {\n        height:40px;\n      }\n      button {\n        //background-color: #15a585;\n        background-color: #fdfd86;\n        border:none;\n        border-radius: 10px;\n        cursor:pointer;\n      }\n    }\n\n  }\n  \n\n \n\n    .todo-card {\n\n        display:flex;\n        flex-direction:column;\n        justify-content:flex-start;\n        align-items: left;\n\n        margin-top:15px;\n        margin-bottom:15px;\n        \n        //outline: 8px ridge $purple;\n        border-radius: 2rem;\n        background-color:#6a76c8;\n        \n        font-family: 'Allen', sans-serif;\n        \n        .main-todo {\n            display:flex;\n            justify-content: flex-start;\n            align-items:center;\n        }\n        .click-todo {\n            height: 50px;\n            display:flex;\n            justify-content: flex-start;\n            align-items:center;\n            cursor:pointer;\n        }\n    \n\n        .toggle-todo {\n\n            .card-description {\n                font-size: 1rem;\n                margin-left: 15px;\n                margin-right: 15px; \n                margin-bottom:15px;    \n                text-align:left;\n            }\n        }\n\n        .card-title {\n            font-size: 1.5rem;\n            margin-left: 15px;\n            margin-right: 15px;\n            min-width:500px;\n            text-align:left;\n        }\n\n        .card-due-date {\n            font-size:1.5rem;\n            margin-left:15px;\n            margin-right:15px;\n        }\n\n        div[class^='priority'] {\n            font-size:1.5rem;\n            min-width:100px;\n            text-align:left;\n\n        }\n\n        img {\n          height:40px;\n        }\n        button {\n          //background-color: #15a585;\n          background-color:#6a76c8;\n          border:none;\n          border-radius: 10px;\n          margin-right:5px;\n          cursor:pointer;\n        }\n\n\n    }\n}\n\n#project-div-form {\n  position:fixed;\n  z-index:2;\n  left:50%;\n  top:50%;\n  transform: translate(-50%, -50%);\n  background:black;\n  border: 3px solid #f1f1f1;\n  padding: 10px;\n  background-color: white;\n  border-radius: 5px;\n\n  #prj-title {\n    display:inline-block;\n  }\n\n  #prj-desc {\n    display:block;\n    margin:auto;\n    width: 300px;\n    height: 100px;\n  }\n \n #project-form {\n  display:flex;\n  flex-direction: column;\n }\n\n\n\n\n  #btn-prj-form-confirm, \n  #btn-prj-form-edit, \n  #btn-prj-form-cancel {\n    //display:block;\n    //margin:auto;\n \n    background-color: #04AA6D;\n    color: white;\n    padding: 16px 20px;\n    border: none;\n    cursor: pointer;\n    width: 50%;\n    margin-top:10px;\n    opacity: 0.7;\n  }\n   \n  #btn-form-confirm:hover, \n  #btn-form-edit:hover, \n  #btn-form-cancel:hover {\n    opacity: 1;\n  }\n\n  input {\n    border: 2px solid #000;\n    margin-bottom: 15px;\n    padding: 5px;\n    border-radius: 5px;\n  }\n  \n  input:invalid {\n    border-color: red;\n  }\n  \n  input:valid {\n    border-color: green;\n  }\n\n  select:invalid {\n    border-color: red;\n  }\n  \n  select:valid {\n    border-color: green;\n  }\n}\n\n\n#div-form {\n \n  position:fixed;\n  z-index:2;\n  left:50%;\n  top:50%;\n  transform: translate(-50%, -50%);\n  background:black;\n  border: 3px solid #f1f1f1;\n  padding: 10px;\n  background-color: white;\n  border-radius: 5px;\n\n  #input-title {\n    display:inline-block;\n\n  }\n  #input-date {\n    display:inline-block;\n  }\n  #input-priority {\n    display:inline-block;\n    border-radius: 5px;\n    border: 2px solid;\n    margin-bottom: 15px;\n    padding: 5px;\n  }\n  #input-desc {\n    display:block;\n    margin:auto;\n    width: 300px;\n    height: 100px;\n    \n  }\n  #btn-form-confirm, \n  #btn-form-edit, \n  #btn-form-cancel {\n    //display:block;\n    //margin:auto;\n \n    background-color: #04AA6D;\n    color: white;\n    padding: 16px 20px;\n    border: none;\n    cursor: pointer;\n    width: 50%;\n    margin-top:10px;\n    opacity: 0.7;\n  }\n   \n  #btn-form-confirm:hover, \n  #btn-form-edit:hover, \n  #btn-form-cancel:hover {\n    opacity: 1;\n  }\n\n  input {\n    border: 2px solid #000;\n    margin-bottom: 15px;\n    padding: 5px;\n    border-radius: 5px;\n  }\n  \n  input:invalid {\n    border-color: red;\n  }\n  \n  input:valid {\n    border-color: green;\n  }\n\n  select:invalid {\n    border-color: red;\n  }\n  \n  select:valid {\n    border-color: green;\n  }\n}\n\n\n\n#btn-new-prj, #btn-new-todo {\n  width:250px;\n}\n\n\n/* the CSS for the checkboxes */\n/* The switch - the box around the slider */\n.switch {\n    position: relative;\n    z-index:1;\n    display: inline-block;\n    width: 60px;\n    height: 34px;\n  }\n  \n  /* Hide default HTML checkbox */\n  .switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n  \n  /* The slider */\n  .slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    -webkit-transition: .4s;\n    transition: .4s;\n  }\n  \n  .slider:before {\n    position: absolute;\n    content: \"\";\n    height: 26px;\n    width: 26px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    -webkit-transition: .4s;\n    transition: .4s;\n  }\n  \n  input:checked + .slider {\n    background-color: #2196F3;\n  }\n  \n  input:focus + .slider {\n    box-shadow: 0 0 1px #2196F3;\n  }\n  \n  input:checked + .slider:before {\n    -webkit-transform: translateX(26px);\n    -ms-transform: translateX(26px);\n    transform: translateX(26px);\n  }\n  \n  /* Rounded sliders */\n  .slider.round {\n    border-radius: 34px;\n  }\n  \n  .slider.round:before {\n    border-radius: 50%;\n  }\n\n.form-button-container {\n  display:flex;\n  gap:10px;\n}\n\n.grid-div {\n  // since we need invisible to be stronger...we gotta put the grid css here...\n  display:grid;\n  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n  gap:15px;\n  \n}\n\n/* Clases generales */\n.invisible {\n  display:none;\n}\n\n\n\n.striked {\n  text-decoration: line-through;\n}\n\n\n\n/* The fancy button code. I've copied it from:\nhttps://www.joshwcomeau.com/animation/3d-button/#our-strategy\nI made some modifications of my own, to get blue, green and red\n*/\n\n.pushable {\n  position: relative;\n  border: none;\n  background: transparent;\n  padding: 0;\n  cursor: pointer;\n  outline-offset: 4px;\n  transition: filter 250ms;\n  width:100%;\n  height:50px;\n}\n.shadow {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 12px;\n  background: rgba(0, 0, 0, 0.25);\n  will-change: transform;\n  transform: translateY(2px);\n  transition:\n    transform\n    600ms\n    cubic-bezier(.3, .7, .4, 1);\n}\n\n.edge {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border-radius: 12px;\n  \n}\n\n.front {\n  display: block;\n  position: relative;\n  padding: 12px 22px;\n  border-radius: 12px;\n  font-size: 1.25rem;\n  color: white;\n  will-change: transform;\n  transform: translateY(-4px);\n  transition:\n    transform\n    600ms\n    cubic-bezier(.3, .7, .4, 1);\n}\n\n\n.blue {\n  //background: rgba(0, 100, 240, 0.973);\n  background:navy;\n}\n\n.blue-grad {\n  background: linear-gradient(\n    to left,\n    rgba(0, 0, 82,  1) 0%,\n    rgba(0, 0, 163, 1) 8%,\n    rgba(0, 0, 163, 1) 92%,\n    rgba(0, 0, 82,  1) 100%\n  );\n}\n\n\n\n.pushable:hover {\n  filter: brightness(110%);\n}\n.pushable:hover .front {\n  transform: translateY(-6px);\n  transition:\n    transform\n    250ms\n    cubic-bezier(.3, .7, .4, 1.5);\n}\n.pushable:active .front {\n  transform: translateY(-2px);\n  transition: transform 34ms;\n}\n.pushable:hover .shadow {\n  transform: translateY(4px);\n  transition:\n    transform\n    250ms\n    cubic-bezier(.3, .7, .4, 1.5);\n}\n.pushable:active .shadow {\n  transform: translateY(1px);\n  transition: transform 34ms;\n}\n.pushable:focus:not(:focus-visible) {\n  outline: none;\n}\n\n"],sourceRoot:""}]);const v=p},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var u=this[c][0];null!=u&&(a[u]=!0)}for(var l=0;l<t.length;l++){var f=[].concat(t[l]);r&&a[f[0]]||(void 0!==i&&(void 0===f[5]||(f[1]="@layer".concat(f[5].length>0?" ".concat(f[5]):""," {").concat(f[1],"}")),f[5]=i),n&&(f[2]?(f[1]="@media ".concat(f[2]," {").concat(f[1],"}"),f[2]=n):f[2]=n),o&&(f[4]?(f[1]="@supports (".concat(f[4],") {").concat(f[1],"}"),f[4]=o):f[4]="".concat(o)),e.push(f))}},e}},667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],c=0;c<t.length;c++){var u=t[c],l=r.base?u[0]+r.base:u[0],f=i[l]||0,s="".concat(l," ").concat(f);i[l]=f+1;var d=n(s),p={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var y=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:s,updater:y,references:1})}a.push(s)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var c=n(i[a]);e[c].references--}for(var u=r(t,o),l=0;l<i.length;l++){var f=n(i[l]);0===e[f].references&&(e[f].updater(),e.splice(f,1))}i=u}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},913:(t,e,n)=>{t.exports=n.p+"49fa41807bd41a967a6a.ttf"},329:(t,e,n)=>{t.exports=n.p+"87152482d7976bd3475d.ttf"},533:(t,e,n)=>{t.exports=n.p+"290f7642ed9859459b39.ttf"},792:(t,e,n)=>{t.exports=n.p+"dc3d2a054ce089b37bb7.TTF"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),i=n(569),a=n.n(i),c=n(565),u=n.n(c),l=n(216),f=n.n(l),s=n(589),d=n.n(s),p=n(99),y={};y.styleTagTransform=d(),y.setAttributes=u(),y.insert=a().bind(null,"head"),y.domAPI=o(),y.insertStyleElement=f(),e()(p.Z,y),p.Z&&p.Z.locals&&p.Z.locals;var b={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function h(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const m={date:h({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:h({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:h({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var v={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function g(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):o;r=t.formattingValues[i]||t.formattingValues[o]}else{var a=t.defaultWidth,c=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[c]||t.values[a]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const A={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:g({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:g({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:g({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:g({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:g({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function w(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(o);if(!i)return null;var a,c=i[0],u=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(u)?B(u,(function(t){return t.test(c)})):C(u,(function(t){return t.test(c)}));a=t.valueCallback?t.valueCallback(l):l,a=n.valueCallback?n.valueCallback(a):a;var f=e.slice(c.length);return{value:a,rest:f}}}function C(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function B(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var x,k={ordinalNumber:(x={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(x.matchPattern);if(!n)return null;var r=n[0],o=t.match(x.parsePattern);if(!o)return null;var i=x.valueCallback?x.valueCallback(o[0]):o[0];i=e.valueCallback?e.valueCallback(i):i;var a=t.slice(r.length);return{value:i,rest:a}}),era:w({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:w({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:w({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:w({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:w({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const O={code:"en-US",formatDistance:function(t,e,n){var r,o=b[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:m,formatRelative:function(t,e,n,r){return v[t]},localize:A,match:k,options:{weekStartsOn:0,firstWeekContainsDate:1}};function j(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function T(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function P(t){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},P(t)}function S(t){T(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===P(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function E(t,e){T(2,arguments);var n=S(t).getTime(),r=j(e);return new Date(n+r)}function _(t,e){T(2,arguments);var n=j(e);return E(t,-n)}function R(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}var D=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},M=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const U={p:M,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return D(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",D(o,e)).replace("{{time}}",M(i,e))}};function Y(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var I=["D","DD"],N=["YY","YYYY"];function W(t){return-1!==I.indexOf(t)}function q(t){return-1!==N.indexOf(t)}function H(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}function L(t){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},L(t)}function z(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Q(t,e)}function Q(t,e){return Q=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Q(t,e)}function F(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Z(t);if(e){var o=Z(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return G(this,n)}}function G(t,e){return!e||"object"!==L(e)&&"function"!=typeof e?X(t):e}function X(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Z(t){return Z=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Z(t)}function V(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function $(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function K(t,e,n){return e&&$(t.prototype,e),n&&$(t,n),t}function J(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var tt=function(){function t(){V(this,t),J(this,"subPriority",0)}return K(t,[{key:"validate",value:function(t,e){return!0}}]),t}(),et=function(t){z(n,t);var e=F(n);function n(t,r,o,i,a){var c;return V(this,n),(c=e.call(this)).value=t,c.validateValue=r,c.setValue=o,c.priority=i,a&&(c.subPriority=a),c}return K(n,[{key:"validate",value:function(t,e){return this.validateValue(t,this.value,e)}},{key:"set",value:function(t,e,n){return this.setValue(t,e,this.value,n)}}]),n}(tt),nt=function(t){z(n,t);var e=F(n);function n(){var t;V(this,n);for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];return J(X(t=e.call.apply(e,[this].concat(o))),"priority",10),J(X(t),"subPriority",-1),t}return K(n,[{key:"set",value:function(t,e){if(e.timestampIsSet)return t;var n=new Date(0);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}}]),n}(tt);function rt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var ot=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n;return e=t,n=[{key:"run",value:function(t,e,n,r){var o=this.parse(t,e,n,r);return o?{setter:new et(o.value,this.validate,this.set,this.priority,this.subPriority),rest:o.rest}:null}},{key:"validate",value:function(t,e,n){return!0}}],n&&rt(e.prototype,n),t}();function it(t){return it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},it(t)}function at(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ct(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ut(t,e){return ut=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},ut(t,e)}function lt(t,e){return!e||"object"!==it(e)&&"function"!=typeof e?ft(t):e}function ft(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function st(t){return st=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},st(t)}function dt(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var pt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ut(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=st(r);if(o){var n=st(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return lt(this,t)});function a(){var t;at(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return dt(ft(t=i.call.apply(i,[this].concat(n))),"priority",140),dt(ft(t),"incompatibleTokens",["R","u","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}},{key:"set",value:function(t,e,n){return e.era=n,t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}],n&&ct(e.prototype,n),a}(ot),yt=(Math.pow(10,8),/^(1[0-2]|0?\d)/),bt=/^(3[0-1]|[0-2]?\d)/,ht=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,mt=/^(5[0-3]|[0-4]?\d)/,vt=/^(2[0-3]|[0-1]?\d)/,gt=/^(2[0-4]|[0-1]?\d)/,At=/^(1[0-1]|0?\d)/,wt=/^(1[0-2]|0?\d)/,Ct=/^[0-5]?\d/,Bt=/^[0-5]?\d/,xt=/^\d/,kt=/^\d{1,2}/,Ot=/^\d{1,3}/,jt=/^\d{1,4}/,Tt=/^-?\d+/,Pt=/^-?\d/,St=/^-?\d{1,2}/,Et=/^-?\d{1,3}/,_t=/^-?\d{1,4}/,Rt=/^([+-])(\d{2})(\d{2})?|Z/,Dt=/^([+-])(\d{2})(\d{2})|Z/,Mt=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Ut=/^([+-])(\d{2}):(\d{2})|Z/,Yt=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function It(t,e){return t?{value:e(t.value),rest:t.rest}:t}function Nt(t,e){var n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function Wt(t,e){var n=e.match(t);return n?"Z"===n[0]?{value:0,rest:e.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:e.slice(n[0].length)}:null}function qt(t){return Nt(Tt,t)}function Ht(t,e){switch(t){case 1:return Nt(xt,e);case 2:return Nt(kt,e);case 3:return Nt(Ot,e);case 4:return Nt(jt,e);default:return Nt(new RegExp("^\\d{1,"+t+"}"),e)}}function Lt(t,e){switch(t){case 1:return Nt(Pt,e);case 2:return Nt(St,e);case 3:return Nt(Et,e);case 4:return Nt(_t,e);default:return Nt(new RegExp("^-?\\d{1,"+t+"}"),e)}}function zt(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function Qt(t,e){var n,r=e>0,o=r?e:1-e;if(o<=50)n=t||100;else{var i=o+50;n=t+100*Math.floor(i/100)-(t>=i%100?100:0)}return r?n:1-n}function Ft(t){return t%400==0||t%4==0&&t%100!=0}function Gt(t){return Gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Gt(t)}function Xt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Zt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Vt(t,e){return Vt=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Vt(t,e)}function $t(t,e){return!e||"object"!==Gt(e)&&"function"!=typeof e?Kt(t):e}function Kt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Jt(t){return Jt=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Jt(t)}function te(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ee=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Vt(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Jt(r);if(o){var n=Jt(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return $t(this,t)});function a(){var t;Xt(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return te(Kt(t=i.call.apply(i,[this].concat(n))),"priority",130),te(Kt(t),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"yy"===e}};switch(e){case"y":return It(Ht(4,t),r);case"yo":return It(n.ordinalNumber(t,{unit:"year"}),r);default:return It(Ht(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n){var r=t.getUTCFullYear();if(n.isTwoDigitYear){var o=Qt(n.year,r);return t.setUTCFullYear(o,0,1),t.setUTCHours(0,0,0,0),t}var i="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(i,0,1),t.setUTCHours(0,0,0,0),t}}],n&&Zt(e.prototype,n),a}(ot),ne={};function re(){return ne}function oe(t,e){var n,r,o,i,a,c,u,l;T(1,arguments);var f=re(),s=j(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(c=a.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==o?o:f.weekStartsOn)&&void 0!==r?r:null===(u=f.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(s>=0&&s<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=S(t),p=d.getUTCDay(),y=(p<s?7:0)+p-s;return d.setUTCDate(d.getUTCDate()-y),d.setUTCHours(0,0,0,0),d}function ie(t,e){var n,r,o,i,a,c,u,l;T(1,arguments);var f=S(t),s=f.getUTCFullYear(),d=re(),p=j(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(c=a.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==o?o:d.firstWeekContainsDate)&&void 0!==r?r:null===(u=d.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=new Date(0);y.setUTCFullYear(s+1,0,p),y.setUTCHours(0,0,0,0);var b=oe(y,e),h=new Date(0);h.setUTCFullYear(s,0,p),h.setUTCHours(0,0,0,0);var m=oe(h,e);return f.getTime()>=b.getTime()?s+1:f.getTime()>=m.getTime()?s:s-1}function ae(t){return ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ae(t)}function ce(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ue(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function le(t,e){return le=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},le(t,e)}function fe(t,e){return!e||"object"!==ae(e)&&"function"!=typeof e?se(t):e}function se(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function de(t){return de=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},de(t)}function pe(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ye=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&le(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=de(r);if(o){var n=de(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return fe(this,t)});function a(){var t;ce(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return pe(se(t=i.call.apply(i,[this].concat(n))),"priority",130),pe(se(t),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"YY"===e}};switch(e){case"Y":return It(Ht(4,t),r);case"Yo":return It(n.ordinalNumber(t,{unit:"year"}),r);default:return It(Ht(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n,r){var o=ie(t,r);if(n.isTwoDigitYear){var i=Qt(n.year,o);return t.setUTCFullYear(i,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),oe(t,r)}var a="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(a,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),oe(t,r)}}],n&&ue(e.prototype,n),a}(ot);function be(t){T(1,arguments);var e=1,n=S(t),r=n.getUTCDay(),o=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function he(t){return he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},he(t)}function me(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ve(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ge(t,e){return ge=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},ge(t,e)}function Ae(t,e){return!e||"object"!==he(e)&&"function"!=typeof e?we(t):e}function we(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ce(t){return Ce=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ce(t)}function Be(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var xe=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ge(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ce(r);if(o){var n=Ce(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Ae(this,t)});function a(){var t;me(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Be(we(t=i.call.apply(i,[this].concat(n))),"priority",130),Be(we(t),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),t}return e=a,(n=[{key:"parse",value:function(t,e){return Lt("R"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){var r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),be(r)}}])&&ve(e.prototype,n),a}(ot);function ke(t){return ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ke(t)}function Oe(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function je(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Te(t,e){return Te=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Te(t,e)}function Pe(t,e){return!e||"object"!==ke(e)&&"function"!=typeof e?Se(t):e}function Se(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ee(t){return Ee=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ee(t)}function _e(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Re=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Te(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ee(r);if(o){var n=Ee(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Pe(this,t)});function a(){var t;Oe(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return _e(Se(t=i.call.apply(i,[this].concat(n))),"priority",130),_e(Se(t),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),t}return e=a,(n=[{key:"parse",value:function(t,e){return Lt("u"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){return t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}])&&je(e.prototype,n),a}(ot);function De(t){return De="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},De(t)}function Me(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ue(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ye(t,e){return Ye=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Ye(t,e)}function Ie(t,e){return!e||"object"!==De(e)&&"function"!=typeof e?Ne(t):e}function Ne(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function We(t){return We=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},We(t)}function qe(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var He=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ye(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=We(r);if(o){var n=We(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Ie(this,t)});function a(){var t;Me(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return qe(Ne(t=i.call.apply(i,[this].concat(n))),"priority",120),qe(Ne(t),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"Q":case"QQ":return Ht(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}],n&&Ue(e.prototype,n),a}(ot);function Le(t){return Le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Le(t)}function ze(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Qe(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Fe(t,e){return Fe=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Fe(t,e)}function Ge(t,e){return!e||"object"!==Le(e)&&"function"!=typeof e?Xe(t):e}function Xe(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ze(t){return Ze=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ze(t)}function Ve(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var $e=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Fe(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ze(r);if(o){var n=Ze(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Ge(this,t)});function a(){var t;ze(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Ve(Xe(t=i.call.apply(i,[this].concat(n))),"priority",120),Ve(Xe(t),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"q":case"qq":return Ht(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}],n&&Qe(e.prototype,n),a}(ot);function Ke(t){return Ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ke(t)}function Je(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function tn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function en(t,e){return en=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},en(t,e)}function nn(t,e){return!e||"object"!==Ke(e)&&"function"!=typeof e?rn(t):e}function rn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function on(t){return on=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},on(t)}function an(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var cn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&en(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=on(r);if(o){var n=on(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return nn(this,t)});function a(){var t;Je(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return an(rn(t=i.call.apply(i,[this].concat(n))),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),an(rn(t),"priority",110),t}return e=a,n=[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"M":return It(Nt(yt,t),r);case"MM":return It(Ht(2,t),r);case"Mo":return It(n.ordinalNumber(t,{unit:"month"}),r);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}],n&&tn(e.prototype,n),a}(ot);function un(t){return un="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},un(t)}function ln(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function fn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function sn(t,e){return sn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},sn(t,e)}function dn(t,e){return!e||"object"!==un(e)&&"function"!=typeof e?pn(t):e}function pn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function yn(t){return yn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},yn(t)}function bn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var hn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&sn(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=yn(r);if(o){var n=yn(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return dn(this,t)});function a(){var t;ln(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return bn(pn(t=i.call.apply(i,[this].concat(n))),"priority",110),bn(pn(t),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"L":return It(Nt(yt,t),r);case"LL":return It(Ht(2,t),r);case"Lo":return It(n.ordinalNumber(t,{unit:"month"}),r);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}],n&&fn(e.prototype,n),a}(ot);function mn(t,e){var n,r,o,i,a,c,u,l;T(1,arguments);var f=re(),s=j(null!==(n=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(c=a.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==o?o:f.firstWeekContainsDate)&&void 0!==r?r:null===(u=f.locale)||void 0===u||null===(l=u.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),d=ie(t,e),p=new Date(0);p.setUTCFullYear(d,0,s),p.setUTCHours(0,0,0,0);var y=oe(p,e);return y}var vn=6048e5;function gn(t,e){T(1,arguments);var n=S(t),r=oe(n,e).getTime()-mn(n,e).getTime();return Math.round(r/vn)+1}function An(t){return An="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},An(t)}function wn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Cn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Bn(t,e){return Bn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Bn(t,e)}function xn(t,e){return!e||"object"!==An(e)&&"function"!=typeof e?kn(t):e}function kn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function On(t){return On=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},On(t)}function jn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Tn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Bn(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=On(r);if(o){var n=On(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return xn(this,t)});function a(){var t;wn(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return jn(kn(t=i.call.apply(i,[this].concat(n))),"priority",100),jn(kn(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"w":return Nt(mt,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n,r){return oe(function(t,e,n){T(2,arguments);var r=S(t),o=j(e),i=gn(r,n)-o;return r.setUTCDate(r.getUTCDate()-7*i),r}(t,n,r),r)}}],n&&Cn(e.prototype,n),a}(ot);function Pn(t){T(1,arguments);var e=S(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=be(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var a=be(i);return e.getTime()>=o.getTime()?n+1:e.getTime()>=a.getTime()?n:n-1}function Sn(t){T(1,arguments);var e=Pn(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=be(n);return r}var En=6048e5;function _n(t){T(1,arguments);var e=S(t),n=be(e).getTime()-Sn(e).getTime();return Math.round(n/En)+1}function Rn(t){return Rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Rn(t)}function Dn(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Mn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Un(t,e){return Un=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Un(t,e)}function Yn(t,e){return!e||"object"!==Rn(e)&&"function"!=typeof e?In(t):e}function In(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Nn(t){return Nn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Nn(t)}function Wn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var qn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Un(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Nn(r);if(o){var n=Nn(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Yn(this,t)});function a(){var t;Dn(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Wn(In(t=i.call.apply(i,[this].concat(n))),"priority",100),Wn(In(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"I":return Nt(mt,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n){return be(function(t,e){T(2,arguments);var n=S(t),r=j(e),o=_n(n)-r;return n.setUTCDate(n.getUTCDate()-7*o),n}(t,n))}}],n&&Mn(e.prototype,n),a}(ot);function Hn(t){return Hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Hn(t)}function Ln(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function zn(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Qn(t,e){return Qn=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Qn(t,e)}function Fn(t,e){return!e||"object"!==Hn(e)&&"function"!=typeof e?Gn(t):e}function Gn(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Xn(t){return Xn=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Xn(t)}function Zn(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Vn=[31,28,31,30,31,30,31,31,30,31,30,31],$n=[31,29,31,30,31,30,31,31,30,31,30,31],Kn=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Qn(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Xn(r);if(o){var n=Xn(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Fn(this,t)});function a(){var t;Ln(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Zn(Gn(t=i.call.apply(i,[this].concat(n))),"priority",90),Zn(Gn(t),"subPriority",1),Zn(Gn(t),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"d":return Nt(bt,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){var n=Ft(t.getUTCFullYear()),r=t.getUTCMonth();return n?e>=1&&e<=$n[r]:e>=1&&e<=Vn[r]}},{key:"set",value:function(t,e,n){return t.setUTCDate(n),t.setUTCHours(0,0,0,0),t}}],n&&zn(e.prototype,n),a}(ot);function Jn(t){return Jn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Jn(t)}function tr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function er(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function nr(t,e){return nr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},nr(t,e)}function rr(t,e){return!e||"object"!==Jn(e)&&"function"!=typeof e?or(t):e}function or(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ir(t){return ir=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ir(t)}function ar(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var cr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&nr(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ir(r);if(o){var n=ir(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return rr(this,t)});function a(){var t;tr(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return ar(or(t=i.call.apply(i,[this].concat(n))),"priority",90),ar(or(t),"subpriority",1),ar(or(t),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"D":case"DD":return Nt(ht,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return Ft(t.getUTCFullYear())?e>=1&&e<=366:e>=1&&e<=365}},{key:"set",value:function(t,e,n){return t.setUTCMonth(0,n),t.setUTCHours(0,0,0,0),t}}],n&&er(e.prototype,n),a}(ot);function ur(t,e,n){var r,o,i,a,c,u,l,f;T(2,arguments);var s=re(),d=j(null!==(r=null!==(o=null!==(i=null!==(a=null==n?void 0:n.weekStartsOn)&&void 0!==a?a:null==n||null===(c=n.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==i?i:s.weekStartsOn)&&void 0!==o?o:null===(l=s.locale)||void 0===l||null===(f=l.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==r?r:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=S(t),y=j(e),b=p.getUTCDay(),h=y%7,m=(h+7)%7,v=(m<d?7:0)+y-b;return p.setUTCDate(p.getUTCDate()+v),p}function lr(t){return lr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},lr(t)}function fr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function sr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function dr(t,e){return dr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},dr(t,e)}function pr(t,e){return!e||"object"!==lr(e)&&"function"!=typeof e?yr(t):e}function yr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function br(t){return br=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},br(t)}function hr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var mr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&dr(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=br(r);if(o){var n=br(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return pr(this,t)});function a(){var t;fr(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return hr(yr(t=i.call.apply(i,[this].concat(n))),"priority",90),hr(yr(t),"incompatibleTokens",["D","i","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=ur(t,n,r)).setUTCHours(0,0,0,0),t}}],n&&sr(e.prototype,n),a}(ot);function vr(t){return vr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},vr(t)}function gr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ar(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function wr(t,e){return wr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},wr(t,e)}function Cr(t,e){return!e||"object"!==vr(e)&&"function"!=typeof e?Br(t):e}function Br(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function xr(t){return xr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},xr(t)}function kr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Or=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&wr(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=xr(r);if(o){var n=xr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Cr(this,t)});function a(){var t;gr(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return kr(Br(t=i.call.apply(i,[this].concat(n))),"priority",90),kr(Br(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n,r){var o=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return It(Ht(e.length,t),o);case"eo":return It(n.ordinalNumber(t,{unit:"day"}),o);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=ur(t,n,r)).setUTCHours(0,0,0,0),t}}],n&&Ar(e.prototype,n),a}(ot);function jr(t){return jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},jr(t)}function Tr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Pr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Sr(t,e){return Sr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Sr(t,e)}function Er(t,e){return!e||"object"!==jr(e)&&"function"!=typeof e?_r(t):e}function _r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Rr(t){return Rr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Rr(t)}function Dr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Mr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Sr(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Rr(r);if(o){var n=Rr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Er(this,t)});function a(){var t;Tr(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Dr(_r(t=i.call.apply(i,[this].concat(n))),"priority",90),Dr(_r(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n,r){var o=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return It(Ht(e.length,t),o);case"co":return It(n.ordinalNumber(t,{unit:"day"}),o);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=ur(t,n,r)).setUTCHours(0,0,0,0),t}}],n&&Pr(e.prototype,n),a}(ot);function Ur(t){return Ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ur(t)}function Yr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ir(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Nr(t,e){return Nr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Nr(t,e)}function Wr(t,e){return!e||"object"!==Ur(e)&&"function"!=typeof e?qr(t):e}function qr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Hr(t){return Hr=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Hr(t)}function Lr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var zr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Nr(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Hr(r);if(o){var n=Hr(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Wr(this,t)});function a(){var t;Yr(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Lr(qr(t=i.call.apply(i,[this].concat(n))),"priority",90),Lr(qr(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){var r=function(t){return 0===t?7:t};switch(e){case"i":case"ii":return Ht(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return It(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiii":return It(n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiiii":return It(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);default:return It(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r)}}},{key:"validate",value:function(t,e){return e>=1&&e<=7}},{key:"set",value:function(t,e,n){return t=function(t,e){T(2,arguments);var n=j(e);n%7==0&&(n-=7);var r=1,o=S(t),i=o.getUTCDay(),a=((n%7+7)%7<r?7:0)+n-i;return o.setUTCDate(o.getUTCDate()+a),o}(t,n),t.setUTCHours(0,0,0,0),t}}],n&&Ir(e.prototype,n),a}(ot);function Qr(t){return Qr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Qr(t)}function Fr(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Gr(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Xr(t,e){return Xr=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Xr(t,e)}function Zr(t,e){return!e||"object"!==Qr(e)&&"function"!=typeof e?Vr(t):e}function Vr(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function $r(t){return $r=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},$r(t)}function Kr(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Jr=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Xr(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=$r(r);if(o){var n=$r(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Zr(this,t)});function a(){var t;Fr(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Kr(Vr(t=i.call.apply(i,[this].concat(n))),"priority",80),Kr(Vr(t),"incompatibleTokens",["b","B","H","k","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(zt(n),0,0,0),t}}],n&&Gr(e.prototype,n),a}(ot);function to(t){return to="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},to(t)}function eo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function no(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function ro(t,e){return ro=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},ro(t,e)}function oo(t,e){return!e||"object"!==to(e)&&"function"!=typeof e?io(t):e}function io(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ao(t){return ao=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ao(t)}function co(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var uo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&ro(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ao(r);if(o){var n=ao(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return oo(this,t)});function a(){var t;eo(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return co(io(t=i.call.apply(i,[this].concat(n))),"priority",80),co(io(t),"incompatibleTokens",["a","B","H","k","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(zt(n),0,0,0),t}}],n&&no(e.prototype,n),a}(ot);function lo(t){return lo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},lo(t)}function fo(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function so(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function po(t,e){return po=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},po(t,e)}function yo(t,e){return!e||"object"!==lo(e)&&"function"!=typeof e?bo(t):e}function bo(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ho(t){return ho=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ho(t)}function mo(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var vo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&po(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ho(r);if(o){var n=ho(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return yo(this,t)});function a(){var t;fo(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return mo(bo(t=i.call.apply(i,[this].concat(n))),"priority",80),mo(bo(t),"incompatibleTokens",["a","b","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(zt(n),0,0,0),t}}],n&&so(e.prototype,n),a}(ot);function go(t){return go="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},go(t)}function Ao(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function wo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Co(t,e){return Co=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Co(t,e)}function Bo(t,e){return!e||"object"!==go(e)&&"function"!=typeof e?xo(t):e}function xo(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ko(t){return ko=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ko(t)}function Oo(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var jo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Co(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ko(r);if(o){var n=ko(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Bo(this,t)});function a(){var t;Ao(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Oo(xo(t=i.call.apply(i,[this].concat(n))),"priority",70),Oo(xo(t),"incompatibleTokens",["H","K","k","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"h":return Nt(wt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=12}},{key:"set",value:function(t,e,n){var r=t.getUTCHours()>=12;return r&&n<12?t.setUTCHours(n+12,0,0,0):r||12!==n?t.setUTCHours(n,0,0,0):t.setUTCHours(0,0,0,0),t}}],n&&wo(e.prototype,n),a}(ot);function To(t){return To="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},To(t)}function Po(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function So(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Eo(t,e){return Eo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Eo(t,e)}function _o(t,e){return!e||"object"!==To(e)&&"function"!=typeof e?Ro(t):e}function Ro(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Do(t){return Do=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Do(t)}function Mo(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Uo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Eo(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Do(r);if(o){var n=Do(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return _o(this,t)});function a(){var t;Po(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Mo(Ro(t=i.call.apply(i,[this].concat(n))),"priority",70),Mo(Ro(t),"incompatibleTokens",["a","b","h","K","k","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"H":return Nt(vt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=23}},{key:"set",value:function(t,e,n){return t.setUTCHours(n,0,0,0),t}}],n&&So(e.prototype,n),a}(ot);function Yo(t){return Yo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Yo(t)}function Io(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function No(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Wo(t,e){return Wo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Wo(t,e)}function qo(t,e){return!e||"object"!==Yo(e)&&"function"!=typeof e?Ho(t):e}function Ho(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Lo(t){return Lo=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Lo(t)}function zo(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Qo=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Wo(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Lo(r);if(o){var n=Lo(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return qo(this,t)});function a(){var t;Io(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return zo(Ho(t=i.call.apply(i,[this].concat(n))),"priority",70),zo(Ho(t),"incompatibleTokens",["h","H","k","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"K":return Nt(At,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.getUTCHours()>=12&&n<12?t.setUTCHours(n+12,0,0,0):t.setUTCHours(n,0,0,0),t}}],n&&No(e.prototype,n),a}(ot);function Fo(t){return Fo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fo(t)}function Go(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Xo(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Zo(t,e){return Zo=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Zo(t,e)}function Vo(t,e){return!e||"object"!==Fo(e)&&"function"!=typeof e?$o(t):e}function $o(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ko(t){return Ko=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ko(t)}function Jo(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ti=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Zo(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ko(r);if(o){var n=Ko(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Vo(this,t)});function a(){var t;Go(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Jo($o(t=i.call.apply(i,[this].concat(n))),"priority",70),Jo($o(t),"incompatibleTokens",["a","b","h","H","K","t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"k":return Nt(gt,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=24}},{key:"set",value:function(t,e,n){var r=n<=24?n%24:n;return t.setUTCHours(r,0,0,0),t}}],n&&Xo(e.prototype,n),a}(ot);function ei(t){return ei="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ei(t)}function ni(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ri(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function oi(t,e){return oi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},oi(t,e)}function ii(t,e){return!e||"object"!==ei(e)&&"function"!=typeof e?ai(t):e}function ai(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ci(t){return ci=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ci(t)}function ui(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var li=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&oi(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ci(r);if(o){var n=ci(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return ii(this,t)});function a(){var t;ni(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return ui(ai(t=i.call.apply(i,[this].concat(n))),"priority",60),ui(ai(t),"incompatibleTokens",["t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"m":return Nt(Ct,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCMinutes(n,0,0),t}}],n&&ri(e.prototype,n),a}(ot);function fi(t){return fi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},fi(t)}function si(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function di(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function pi(t,e){return pi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},pi(t,e)}function yi(t,e){return!e||"object"!==fi(e)&&"function"!=typeof e?bi(t):e}function bi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function hi(t){return hi=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},hi(t)}function mi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var vi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&pi(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=hi(r);if(o){var n=hi(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return yi(this,t)});function a(){var t;si(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return mi(bi(t=i.call.apply(i,[this].concat(n))),"priority",50),mi(bi(t),"incompatibleTokens",["t","T"]),t}return e=a,n=[{key:"parse",value:function(t,e,n){switch(e){case"s":return Nt(Bt,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return Ht(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCSeconds(n,0),t}}],n&&di(e.prototype,n),a}(ot);function gi(t){return gi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},gi(t)}function Ai(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function wi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ci(t,e){return Ci=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Ci(t,e)}function Bi(t,e){return!e||"object"!==gi(e)&&"function"!=typeof e?xi(t):e}function xi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ki(t){return ki=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ki(t)}function Oi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ji=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ci(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ki(r);if(o){var n=ki(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Bi(this,t)});function a(){var t;Ai(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Oi(xi(t=i.call.apply(i,[this].concat(n))),"priority",30),Oi(xi(t),"incompatibleTokens",["t","T"]),t}return e=a,(n=[{key:"parse",value:function(t,e){return It(Ht(e.length,t),(function(t){return Math.floor(t*Math.pow(10,3-e.length))}))}},{key:"set",value:function(t,e,n){return t.setUTCMilliseconds(n),t}}])&&wi(e.prototype,n),a}(ot);function Ti(t){return Ti="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Ti(t)}function Pi(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Si(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Ei(t,e){return Ei=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Ei(t,e)}function _i(t,e){return!e||"object"!==Ti(e)&&"function"!=typeof e?Ri(t):e}function Ri(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Di(t){return Di=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Di(t)}function Mi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Ui=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Ei(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Di(r);if(o){var n=Di(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return _i(this,t)});function a(){var t;Pi(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Mi(Ri(t=i.call.apply(i,[this].concat(n))),"priority",10),Mi(Ri(t),"incompatibleTokens",["t","T","x"]),t}return e=a,(n=[{key:"parse",value:function(t,e){switch(e){case"X":return Wt(Rt,t);case"XX":return Wt(Dt,t);case"XXXX":return Wt(Mt,t);case"XXXXX":return Wt(Yt,t);default:return Wt(Ut,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}])&&Si(e.prototype,n),a}(ot);function Yi(t){return Yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Yi(t)}function Ii(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Ni(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Wi(t,e){return Wi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Wi(t,e)}function qi(t,e){return!e||"object"!==Yi(e)&&"function"!=typeof e?Hi(t):e}function Hi(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Li(t){return Li=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Li(t)}function zi(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var Qi=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Wi(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Li(r);if(o){var n=Li(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return qi(this,t)});function a(){var t;Ii(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return zi(Hi(t=i.call.apply(i,[this].concat(n))),"priority",10),zi(Hi(t),"incompatibleTokens",["t","T","X"]),t}return e=a,(n=[{key:"parse",value:function(t,e){switch(e){case"x":return Wt(Rt,t);case"xx":return Wt(Dt,t);case"xxxx":return Wt(Mt,t);case"xxxxx":return Wt(Yt,t);default:return Wt(Ut,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}])&&Ni(e.prototype,n),a}(ot);function Fi(t){return Fi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fi(t)}function Gi(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Xi(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function Zi(t,e){return Zi=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},Zi(t,e)}function Vi(t,e){return!e||"object"!==Fi(e)&&"function"!=typeof e?$i(t):e}function $i(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ki(t){return Ki=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},Ki(t)}function Ji(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var ta=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&Zi(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ki(r);if(o){var n=Ki(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return Vi(this,t)});function a(){var t;Gi(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return Ji($i(t=i.call.apply(i,[this].concat(n))),"priority",40),Ji($i(t),"incompatibleTokens","*"),t}return e=a,(n=[{key:"parse",value:function(t){return qt(t)}},{key:"set",value:function(t,e,n){return[new Date(1e3*n),{timestampIsSet:!0}]}}])&&Xi(e.prototype,n),a}(ot);function ea(t){return ea="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ea(t)}function na(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function ra(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function oa(t,e){return oa=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},oa(t,e)}function ia(t,e){return!e||"object"!==ea(e)&&"function"!=typeof e?aa(t):e}function aa(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function ca(t){return ca=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},ca(t)}function ua(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var la=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&oa(t,e)}(a,t);var e,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=ca(r);if(o){var n=ca(this).constructor;t=Reflect.construct(e,arguments,n)}else t=e.apply(this,arguments);return ia(this,t)});function a(){var t;na(this,a);for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return ua(aa(t=i.call.apply(i,[this].concat(n))),"priority",20),ua(aa(t),"incompatibleTokens","*"),t}return e=a,(n=[{key:"parse",value:function(t){return qt(t)}},{key:"set",value:function(t,e,n){return[new Date(n),{timestampIsSet:!0}]}}])&&ra(e.prototype,n),a}(ot),fa={G:new pt,y:new ee,Y:new ye,R:new xe,u:new Re,Q:new He,q:new $e,M:new cn,L:new hn,w:new Tn,I:new qn,d:new Kn,D:new cr,E:new mr,e:new Or,c:new Mr,i:new zr,a:new Jr,b:new uo,B:new vo,h:new jo,H:new Uo,K:new Qo,k:new ti,m:new li,s:new vi,S:new ji,X:new Ui,x:new Qi,t:new ta,T:new la};function sa(t){return sa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},sa(t)}function da(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return pa(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pa(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,o=function(){};return{s:o,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){n=t[Symbol.iterator]()},n:function(){var t=n.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==n.return||n.return()}finally{if(c)throw i}}}}function pa(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var ya=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ba=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ha=/^'([^]*?)'?$/,ma=/''/g,va=/\S/,ga=/[a-zA-Z]/;function Aa(t,e,n,r){var o,i,a,c,u,l,f,s,d,p,y,b,h,m,v,g,A,w;T(3,arguments);var C=String(t),B=String(e),x=re(),k=null!==(o=null!==(i=null==r?void 0:r.locale)&&void 0!==i?i:x.locale)&&void 0!==o?o:O;if(!k.match)throw new RangeError("locale must contain match property");var P=j(null!==(a=null!==(c=null!==(u=null!==(l=null==r?void 0:r.firstWeekContainsDate)&&void 0!==l?l:null==r||null===(f=r.locale)||void 0===f||null===(s=f.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==u?u:x.firstWeekContainsDate)&&void 0!==c?c:null===(d=x.locale)||void 0===d||null===(p=d.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==a?a:1);if(!(P>=1&&P<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var E=j(null!==(y=null!==(b=null!==(h=null!==(m=null==r?void 0:r.weekStartsOn)&&void 0!==m?m:null==r||null===(v=r.locale)||void 0===v||null===(g=v.options)||void 0===g?void 0:g.weekStartsOn)&&void 0!==h?h:x.weekStartsOn)&&void 0!==b?b:null===(A=x.locale)||void 0===A||null===(w=A.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==y?y:0);if(!(E>=0&&E<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===B)return""===C?S(n):new Date(NaN);var D,M={firstWeekContainsDate:P,weekStartsOn:E,locale:k},I=[new nt],N=B.match(ba).map((function(t){var e=t[0];return e in U?(0,U[e])(t,k.formatLong):t})).join("").match(ya),L=[],z=da(N);try{var Q=function(){var e=D.value;null!=r&&r.useAdditionalWeekYearTokens||!q(e)||H(e,B,t),null!=r&&r.useAdditionalDayOfYearTokens||!W(e)||H(e,B,t);var n=e[0],o=fa[n];if(o){var i=o.incompatibleTokens;if(Array.isArray(i)){var a=L.find((function(t){return i.includes(t.token)||t.token===n}));if(a)throw new RangeError("The format string mustn't contain `".concat(a.fullToken,"` and `").concat(e,"` at the same time"))}else if("*"===o.incompatibleTokens&&L.length>0)throw new RangeError("The format string mustn't contain `".concat(e,"` and any other token at the same time"));L.push({token:n,fullToken:e});var c=o.run(C,e,k.match,M);if(!c)return{v:new Date(NaN)};I.push(c.setter),C=c.rest}else{if(n.match(ga))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");if("''"===e?e="'":"'"===n&&(e=wa(e)),0!==C.indexOf(e))return{v:new Date(NaN)};C=C.slice(e.length)}};for(z.s();!(D=z.n()).done;){var F=Q();if("object"===sa(F))return F.v}}catch(t){z.e(t)}finally{z.f()}if(C.length>0&&va.test(C))return new Date(NaN);var G=I.map((function(t){return t.priority})).sort((function(t,e){return e-t})).filter((function(t,e,n){return n.indexOf(t)===e})).map((function(t){return I.filter((function(e){return e.priority===t})).sort((function(t,e){return e.subPriority-t.subPriority}))})).map((function(t){return t[0]})),X=S(n);if(isNaN(X.getTime()))return new Date(NaN);var Z,V=_(X,Y(X)),$={},K=da(G);try{for(K.s();!(Z=K.n()).done;){var J=Z.value;if(!J.validate(V,M))return new Date(NaN);var tt=J.set(V,$,M);Array.isArray(tt)?(V=tt[0],R($,tt[1])):V=tt}}catch(t){K.e(t)}finally{K.f()}return V}function wa(t){return t.match(ha)[1].replace(ma,"'")}function Ca(t,e){T(2,arguments);var n=S(t),r=S(e);return n.getTime()>r.getTime()}const Ba=(t,e,n,r,o,i)=>({title:t,description:e,dueDate:n,priority:r,get state(){return i},setId:t=>{o=t},getId:()=>o,getState:()=>i,toggleState:()=>{i="done"==i?"undone":"done"},priorityValue:()=>{switch(r){case"0":return"low";case"1":return"medium";case"2":return"high";case"3":return"critical";default:return 0}}}),xa=(t,e)=>{const n=[];let r;return{title:t,description:e,toDos:n,getId:()=>r,setId:t=>{r=t},addToDo:t=>{t.setId(n.length),n.push(t)},removeToDo:t=>{n.splice(t,1);for(let e=t;e<n.length;e++)n[e].setId(e)},getToDos:()=>n,getToDo:t=>n[t],setToDos:t=>{t.push(t)},getTitle:()=>t,sortToDos:()=>{n.sort(((t,e)=>{const n=((t,e)=>"undone"==t.getState()&&"done"==e.getState()?-1:"done"==t.getState()&&"undone"==e.getState()?1:0)(t,e);if(0!=n)return n;{const n=((t,e)=>e.priority-t.priority>0?1:e.priority-t.priority<0?-1:0)(t,e);return 0!=n?n:((t,e)=>{const n=Aa(t.dueDate,"dd-MM-yyyy",new Date),r=Aa(e.dueDate,"dd-MM-yyyy",new Date);return Ca(n,r)?1:Ca(r,n)?-1:0})(t,e)}}));for(let t=0;t<n.length;t++)n[t].setId(t)}}};function ka(t){return ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ka(t)}function Oa(t){return T(1,arguments),t instanceof Date||"object"===ka(t)&&"[object Date]"===Object.prototype.toString.call(t)}function ja(t){if(T(1,arguments),!Oa(t)&&"number"!=typeof t)return!1;var e=S(t);return!isNaN(Number(e))}var Ta=864e5;function Pa(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const Sa=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return Pa("yy"===e?r%100:r,e.length)},Ea=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):Pa(n+1,2)},_a=function(t,e){return Pa(t.getUTCDate(),e.length)},Ra=function(t,e){return Pa(t.getUTCHours()%12||12,e.length)},Da=function(t,e){return Pa(t.getUTCHours(),e.length)},Ma=function(t,e){return Pa(t.getUTCMinutes(),e.length)},Ua=function(t,e){return Pa(t.getUTCSeconds(),e.length)},Ya=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return Pa(Math.floor(r*Math.pow(10,n-3)),e.length)};var Ia={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return Sa(t,e)},Y:function(t,e,n,r){var o=ie(t,r),i=o>0?o:1-o;return"YY"===e?Pa(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):Pa(i,e.length)},R:function(t,e){return Pa(Pn(t),e.length)},u:function(t,e){return Pa(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return Pa(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return Pa(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return Ea(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return Pa(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=gn(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):Pa(o,e.length)},I:function(t,e,n){var r=_n(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):Pa(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):_a(t,e)},D:function(t,e,n){var r=function(t){T(1,arguments);var e=S(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=n-r;return Math.floor(o/Ta)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):Pa(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return Pa(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return Pa(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return Pa(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Ra(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Da(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):Pa(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):Pa(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Ma(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):Ua(t,e)},S:function(t,e){return Ya(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return Wa(o);case"XXXX":case"XX":return qa(o);default:return qa(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return Wa(o);case"xxxx":case"xx":return qa(o);default:return qa(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Na(o,":");default:return"GMT"+qa(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Na(o,":");default:return"GMT"+qa(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return Pa(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return Pa((r._originalDate||t).getTime(),e.length)}};function Na(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),i=r%60;if(0===i)return n+String(o);var a=e||"";return n+String(o)+a+Pa(i,2)}function Wa(t,e){return t%60==0?(t>0?"-":"+")+Pa(Math.abs(t)/60,2):qa(t,e)}function qa(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+Pa(Math.floor(o/60),2)+n+Pa(o%60,2)}const Ha=Ia;var La=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,za=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Qa=/^'([^]*?)'?$/,Fa=/''/g,Ga=/[a-zA-Z]/;function Xa(t){var e=t.match(Qa);return e?e[1].replace(Fa,"'"):t}const Za=n.p+"a9e48def03753e77132f.png",Va=n.p+"6c0eb91bcfb693516ed0.png",$a=(()=>{const t=(t,e)=>{const n=document.createElement("li");n.className="prj-todo-element",n.innerText=t.title,"done"==t.getState()&&n.classList.toggle("striked"),e.appendChild(n)},e=t=>{for(;t.firstChild;)t.removeChild(t.firstChild)};return{setBoard:(t,n,r)=>{const o=n.getToDos();null!=t&&null!=t&&(t.innerText=n.getTitle()),e(r),o.forEach((t=>{((t,e,n)=>{const r=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div"),a=document.createElement("div"),c=document.createElement("div"),u=document.createElement("div"),l=document.createElement("div"),f=document.createElement("div"),s=document.createElement("label"),d=document.createElement("input"),p=document.createElement("span"),y=document.createElement("img"),b=document.createElement("img"),h=document.createElement("button"),m=document.createElement("button");s.className="switch",d.setAttribute("type","checkbox"),d.id="card-"+t.getId(),d.className="card-check",p.className="slider round",h.id="btn-edit-"+t.getId(),h.className="btn-edit",y.src=Za,y.className="edit-image",m.id="btn-delete-"+t.getId(),m.className="btn-delete",b.src=Va,b.className="delete-image",r.className="todo-card",o.className="main-todo",i.className="click-todo",a.className="toggle-todo invisible",c.className="card-title",u.className="card-due-date",l.className="card-description",f.className="priority",c.innerText=t.title,u.innerText=t.dueDate,l.innerText=t.description,f.innerText=t.priorityValue(),"done"==t.getState()&&(d.checked=!0,d.classList.toggle("checked"),c.classList.toggle("striked"),u.classList.toggle("striked"),l.classList.toggle("striked")),i.append(c,u,f),s.append(d,p),h.appendChild(y),m.appendChild(b),o.append(s,i,h,m),a.appendChild(l),r.append(o,a),e.appendChild(r),i.addEventListener("click",(()=>{a.classList.toggle("invisible")})),a.addEventListener("click",(()=>{a.classList.toggle("invisible")}))})(t,r)}))},setSelector:(t,n,r)=>{const o=t.getProjects(),i=document.createElement("option"),a=document.createTextNode("Admin dashboard"),c=document.createElement("option"),u=document.createTextNode("Create new Project");e(n),i.appendChild(a),i.setAttribute("value","Admin dashboard"),n.appendChild(i),o.forEach((t=>{((t,e)=>{const n=document.createElement("option"),r=document.createTextNode(t.getTitle());n.appendChild(r),n.setAttribute("value",t.getId()),e.appendChild(n)})(t,n)})),c.appendChild(u),c.setAttribute("value","new-project"),n.appendChild(c),null==r||null==r||isNaN(parseInt(r))?r=null:n.value=r},setDashboard:(n,r,o)=>{n.innerText="Admin dashboard",e(o),r.getProjectNumber()>0&&r.getProjects().forEach((e=>{((e,n)=>{const r=document.createElement("div"),o=document.createElement("H1"),i=document.createElement("p"),a=document.createElement("hr"),c=document.createElement("div"),u=document.createElement("ul"),l=document.createElement("div"),f=document.createElement("button"),s=document.createElement("img"),d=document.createElement("button"),p=document.createElement("img");f.id="prj-btn-edit-"+e.getId(),f.className="prj-btn-edit",s.src=Za,s.className="edit-image",d.id="prj-btn-delete-"+e.getId(),d.className="prj-btn-delete",p.src=Va,p.className="delete-image",r.className="prj-card",o.className="prj-card-title",i.className="prj-card-desc",a.className="prj-card-separator",c.className="prj-todos-list-holder",u.className="prj-todos-list",l.className="prj-button-holder",o.innerText=e.title,i.innerText=e.description;const y=e.getToDo(0),b=e.getToDo(1),h=e.getToDo(2);null!=y&&null!=y&&t(y,u),null!=b&&null!=b&&t(b,u),null!=h&&null!=h&&t(h,u),f.appendChild(s),d.appendChild(p),l.append(f,d),c.appendChild(u),r.append(o,i,a,c,l),n.appendChild(r)})(e,o)}))},cleanChilds:e,setVisible:(t,e)=>{switch(e){case!0:t.className.includes("invisible")&&t.classList.remove("invisible");break;case!1:t.className.includes("invisible")||t.classList.add("invisible");break;default:t.classList.toggle("invisible")}}}})(),Ka=(()=>{const t=document.getElementById("background-blocker"),e=document.getElementById("project-div-form"),n=document.forms["project-form"],r=document.getElementById("prj-title"),o=document.getElementById("prj-desc"),i=document.getElementById("btn-prj-form-confirm"),a=document.getElementById("btn-prj-form-edit");let c=!1;return{validate:()=>{const t=n.elements.prjtitle.value;return null!=t&&null!=t&&""!=t},visible:()=>{e.classList.toggle("invisible"),1==c?(c=!1,tc(t,!1)):(n.reset(),c=!0,tc(t,!0),r.focus({focusVisible:!0}))},getData:()=>{const t=n.elements.prjtitle.value,e=n.elements.prjdesc.value;return xa(t,e)},setForm:t=>{r.value=t.title,o.value=t.description,a.setAttribute("prj-id",t.getId()),ec(i,!1),ec(a,!0)}}})(),Ja=(()=>{const t=document.getElementById("background-blocker"),e=document.getElementById("div-form"),n=document.forms["todo-form"],r=document.getElementById("input-title"),o=document.getElementById("input-date"),i=document.getElementById("input-priority"),a=document.getElementById("input-desc"),c=document.getElementById("btn-form-confirm"),u=document.getElementById("btn-form-edit");let l=!1;const f=(t,e,n)=>function(t,e,n){var r,o,i,a,c,u,l,f,s,d,p,y,b,h,m,v,g,A;T(2,arguments);var w=String(e),C=re(),B=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:C.locale)&&void 0!==r?r:O,x=j(null!==(i=null!==(a=null!==(c=null!==(u=null==n?void 0:n.firstWeekContainsDate)&&void 0!==u?u:null==n||null===(l=n.locale)||void 0===l||null===(f=l.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==c?c:C.firstWeekContainsDate)&&void 0!==a?a:null===(s=C.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==i?i:1);if(!(x>=1&&x<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var k=j(null!==(p=null!==(y=null!==(b=null!==(h=null==n?void 0:n.weekStartsOn)&&void 0!==h?h:null==n||null===(m=n.locale)||void 0===m||null===(v=m.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==b?b:C.weekStartsOn)&&void 0!==y?y:null===(g=C.locale)||void 0===g||null===(A=g.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==p?p:0);if(!(k>=0&&k<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!B.localize)throw new RangeError("locale must contain localize property");if(!B.formatLong)throw new RangeError("locale must contain formatLong property");var P=S(t);if(!ja(P))throw new RangeError("Invalid time value");var E=Y(P),R=_(P,E),D={firstWeekContainsDate:x,weekStartsOn:k,locale:B,_originalDate:P};return w.match(za).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,U[e])(t,B.formatLong):t})).join("").match(La).map((function(r){if("''"===r)return"'";var o=r[0];if("'"===o)return Xa(r);var i=Ha[o];if(i)return null!=n&&n.useAdditionalWeekYearTokens||!q(r)||H(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!W(r)||H(r,e,String(t)),i(R,r,B.localize,D);if(o.match(Ga))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return r})).join("")}(Aa(t,e,new Date),n);return{validate:()=>{const t=n.elements.title.value;return null!=t&&null!=t&&""!=t},getData:()=>{const t=n.elements.title.value,e=n.elements.desc.value,r=f(n.elements.date.value,"yyyy-MM-dd","dd-MM-yyyy"),o=n.elements.priority.value;return Ba(t,e,r,o,void 0,"undone")},visible:()=>{e.classList.toggle("invisible"),1==l?(l=!1,tc(t,!1)):(n.reset(),o.setAttribute("value",function(){const t=new Date;return`${t.getFullYear()}-${t.getMonth()+1}-${parseInt(t.getDate())<10?"0"+t.getDate():t.getDate()}`}()),ec(c,!0),ec(u,!1),l=!0,tc(t,!0),r.focus({focusVisible:!0}))},setForm:t=>{r.value=t.title,i.value=t.priority,a.value=t.description,o.setAttribute("value",f(t.dueDate,"dd-MM-yyyy","yyyy-MM-dd")),u.setAttribute("todo-id",t.getId()),ec(c,!1),ec(u,!0)}}})();function tc(t,e){e?t.classList.add("blocker"):t.classList.remove("blocker")}const ec=(t,e)=>{e!=!t.className.includes("invisible")&&(e?t.classList.remove("invisible"):t.classList.add("invisible"))},nc=t=>{let e;try{e=window[t];const n="__storage_test__";return e.setItem(n,n),e.removeItem(n),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}},rc=t=>{localStorage.removeItem("userProjects"),localStorage.setItem("userProjects",JSON.stringify(t.getProjects()))},oc=()=>JSON.parse(localStorage.getItem("userProjects")),ic=(()=>{const t=[];return{addProject:(e,n)=>(isNaN(parseInt(n))?(e.setId(t.length),t.push(e)):(e.setId(n),t.splice(n,0,e)),e),getProjectNumber:()=>t.length,getProjects:()=>t,setProjects:e=>{e.forEach((e=>{let n=xa(e.title,e.description);e.toDos.forEach((t=>{let e=Ba(t.title,t.description,t.dueDate,t.priority,t.idNumber,t.state);n.addToDo(e)})),t.push(n)}))},getProject:e=>t[e],setProjectsId:()=>{for(let e=0;e<t.length;e++)t[e].setId(e)},removeProject:e=>{t.splice(e,1);for(let n=e;n<t.length;n++)t[n].setId(n)}}})();let ac;const cc=document.getElementById("project-selector"),uc=document.getElementById("todo-holder"),lc=document.getElementById("dashboard-div"),fc=document.querySelector(".project-title"),sc=document.getElementById("btn-prj-form-confirm"),dc=document.getElementById("btn-prj-form-edit"),pc=document.getElementById("btn-prj-form-cancel"),yc=document.getElementById("btn-form-confirm"),bc=document.getElementById("btn-form-edit"),hc=document.getElementById("btn-form-cancel"),mc=document.getElementById("btn-new-prj"),vc=document.getElementById("btn-new-todo");function gc(t,e,n,r){document.getElementById(t).addEventListener(n,(t=>{let n=t.target;for(;null!=n;){if(n.matches(e))return void r(t);n=n.parentElement}}))}function Ac(){$a.setVisible(sc,!0),$a.setVisible(dc,!1),Ka.visible()}function wc(t){$a.setSelector(ic,cc,t)}function Cc(){xc("dashboard"),$a.setBoard(fc,ac,uc)}function Bc(){xc("todo-holder"),$a.setDashboard(fc,ic,lc)}function xc(t){switch(t){case"dashboard":$a.cleanChilds(lc),$a.setVisible(lc,!1),$a.setVisible(mc,!1),$a.setVisible(uc,!0),$a.setVisible(vc,!0);break;case"todo-holder":$a.cleanChilds(uc),$a.setVisible(lc,!0),$a.setVisible(mc,!0),$a.setVisible(uc,!1),$a.setVisible(vc,!1)}}(function(){if(!nc("localStorage"))return!1;null!=oc()&&(ic.setProjects(oc()),ic.setProjectsId())})(),cc.addEventListener("change",(function(){const t=cc.value;if(isNaN(parseInt(t)))switch(t){case"Admin dashboard":Bc();break;case"new-project":Ac()}else ac=ic.getProject(parseInt(t)),Cc()})),mc.addEventListener("click",Ac),sc.addEventListener("click",(function(){Ka.validate()&&(Ka.visible(),ac=ic.addProject(Ka.getData()),rc(ic),wc(ac.getId()),Cc())})),dc.addEventListener("click",(function(){if(Ka.validate()){const t=dc.getAttribute("prj-id");ic.removeProject(t),ic.addProject(Ka.getData(),t),Ka.visible(),rc(ic),wc(),Bc()}})),pc.addEventListener("click",(function(){Ka.visible()})),gc("dashboard-div",".prj-btn-delete","click",(t=>{!function(t){const e=t.target.id,n=parseInt(e.substr(15));ic.removeProject(n),rc(ic),wc(),Bc()}(t)})),gc("dashboard-div",".prj-btn-edit","click",(t=>{!function(t){const e=t.target.id,n=parseInt(e.substr(13)),r=ic.getProject(n);Ka.visible(),Ka.setForm(r)}(t)})),vc.addEventListener("click",(function(){Ja.visible()})),yc.addEventListener("click",(function(){Ja.validate()&&(Ja.visible(),ac.addToDo(Ja.getData()),ac.sortToDos(),rc(ic),Cc())})),bc.addEventListener("click",(function(t){if(Ja.validate()){const t=bc.getAttribute("todo-id");ac.removeToDo(t),ac.addToDo(Ja.getData()),ac.sortToDos(),Ja.visible(),rc(ic),Cc()}})),hc.addEventListener("click",(function(){Ja.visible()})),gc("todo-holder",".card-check","click",(t=>{!function(t){const e=t.target.id,n=parseInt(e.substr(5));ac.getToDo(n).toggleState(),ac.sortToDos(),rc(ic),Cc()}(t)})),gc("todo-holder",".btn-delete","click",(t=>{!function(t){const e=t.target.id,n=parseInt(e.substr(11));ac.removeToDo(n),ac.sortToDos(),rc(ic),Cc()}(t)})),gc("todo-holder",".btn-edit","click",(t=>{!function(t){const e=t.target.id,n=parseInt(e.substr(9)),r=ac.getToDo(n);Ja.visible(),Ja.setForm(r)}(t)})),Bc(),wc()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,